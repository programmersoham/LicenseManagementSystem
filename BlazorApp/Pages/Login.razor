@page "/login"
@using BlazorApp
@using BlazorApp.Authentication
@using System.ComponentModel.DataAnnotations;
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider authStateProvider

@using System.Net.Http.Json;
@using System.Security.Claims;
@using Microsoft.AspNetCore.Components.Authorization;

<div class="container mt-5">
    <div class="card w-50 mx-auto">
        <div class="card-body">
            <h3 class="card-title text-center mb-4">Login</h3>

            @if (!IsAuthenticated)
            {   
                <EditForm Model="@loginModel" OnSubmit="@LoginClicked">
                    <div class="mb-3">
                        <label for="username" class="form-label">Username:</label>
                        <InputText id="username" class="form-control" @bind-Value="loginModel.Username" />
                    </div>

                    <div class="mb-3">
                        <label for="password" class="form-label">Password:</label>
                        <InputText type="password" id="password" class="form-control" @bind-Value="loginModel.Password" />
                    </div>

                    <button class="btn btn-primary">Login</button>
                </EditForm>
            }
            else
            {
                <p>You are already logged in.</p>
                NavigationManager.NavigateTo("/addLicense", forceLoad:true);
            }
        </div>
    </div>
</div>

@code {
    private bool IsAuthenticated { get; set; }

    private LoginModel loginModel = new LoginModel();

    private async Task LoginClicked()
    {
        if (!string.IsNullOrEmpty(loginModel.Username) && !string.IsNullOrEmpty(loginModel.Password))
        {
            var loginRequest = new
            {
                loginModel.Username,
                loginModel.Password
            };

            var response = await HttpClient.PostAsJsonAsync("https://localhost:7199/api/Auth/login", loginRequest);

            if (response.IsSuccessStatusCode)
            {
                var userSession = new UserSession { UserName = loginModel.Username };
                var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
                var claim = new Claim(ClaimTypes.Name, userSession.UserName);


                await customAuthStateProvider.UpdateAuthenticationState(userSession);
                NavigationManager.NavigateTo("/addLicense",forceLoad:true);
            }
            else
            {
                // Handle login failure
                IsAuthenticated = false;
                Console.WriteLine($"Error: {response.StatusCode}");

            }
        }
    }

    public class LoginModel
    {   [Required(ErrorMessage ="Username is required")]
        public string Username { get; set; }
        [Required(ErrorMessage ="Password is required")]
        public string Password { get; set; }
    }
}


  