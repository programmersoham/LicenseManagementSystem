@attribute [Authorize]
@page "/addlicense"
@using BlazorApp.Models
@using BlazorApp.Attributes;
@inject HttpClient HttpClient
@inject AuthenticationStateProvider authStateProvider
@using System.ComponentModel.DataAnnotations;
<PageTitle>Add License</PageTitle>

<h1>Add License</h1>

<EditForm Model="@formData" OnValidSubmit="HandleSubmit">
    <DataAnnotationsValidator />

    <div class="form-group">
        <label for="userDropdown">Account</label>
        <select class="form-control" id="userDropdown" @bind="formData.UserName" required>
            <option value="" disabled selected>Select User</option>
            @foreach (var user in users)
            {
                <option>@($"{user.FirstName} {user.LastName}")</option>
            }
        </select>
        <ValidationMessage For="@(() => formData.UserName)" />
    </div>
    <div class="form-group">
        <label for="appDropdown">Application Name</label>
        <select class="form-control" id="appDropdown" @bind="formData.ApplicationName" required>
            <option value="" disabled selected>Select Application</option>
            @foreach (var app in applications)
            {
                <option value="@app.ApplicationName">@app.ApplicationName</option>
            }
        </select>
        <ValidationMessage For="@(() => formData.ApplicationName)" />
    </div>


    <div class="form-group">
        <label for="total">Total License</label>
        <input type="number" class="form-control" id="total" @bind="formData.TotalLicense" required placeholder="Total License" />
        <ValidationMessage For="@(() => formData.TotalLicense)" />
    </div>

    <div class="form-group">
        <label for="prefix">License Prefix</label>
        <input type="text" class="form-control" id="prefix" @bind="formData.LicensePrefix" required placeholder="License Prefix" />
        <ValidationMessage For="@(() => formData.LicensePrefix)" />
    </div>

    <div class="form-group">
        <label for="start">License Start Value</label>
        <input type="text" class="form-control" id="start" @bind="formData.LicenseStartValue" required placeholder="Start Value" />
        <ValidationMessage For="@(() => formData.LicenseStartValue)" />
    </div>

    <button type="submit" class="btn btn-primary my-2">Generate</button>
</EditForm>

@code {
    private List<User> users = new List<User>();
    private List<ApplicationModel> applications = new List<ApplicationModel>();
    private FormData formData = new FormData();
    private string currentuser;

    protected override async Task OnInitializedAsync()
    {
        // Fetch user data from API
        var usersResponse = await HttpClient.GetFromJsonAsync<List<User>>("https://localhost:7199/api/User");
        if (usersResponse != null)
        {
            users = usersResponse;
        }
        // Fetch application data from API
        var applicationsResponse = await HttpClient.GetFromJsonAsync<List<ApplicationModel>>("https://localhost:7199/api/Application");
        if (applicationsResponse != null)
        {
            applications = applicationsResponse;
        }

        // Get the current user's username
        var authState = await authStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity.IsAuthenticated)
        {
            currentuser = user.Identity.Name;
        }
    }

    private async Task HandleSubmit()
    {
        // Set the CreatedBy field to the current user's username
        formData.CreatedBy = currentuser;

        // Use formData.UserName, formData.ApplicationName, etc.
        var response = await HttpClient.PostAsJsonAsync("https://localhost:7199/api/License", formData);
        if (response.IsSuccessStatusCode)
        {
            // Successfully submitted the form data
            Console.WriteLine("Data sent to Backend");
        }
        else
        {
            // API call not successful
            Console.WriteLine($"Error: {response.StatusCode}");
        }
    }

    private class FormData
    {
     
        public string UserName { get; set; }
        public string CreatedBy { get; set; }
        
        public string ApplicationName { get; set; }


        [GreaterThanZero(ErrorMessage = "Total License must be greater than 0")]
        public int TotalLicense { get; set; }
        [Required(ErrorMessage = "License Prefix is required")]
        public string LicensePrefix { get; set; }
        [Required(ErrorMessage = "License Start Value is required")]
        public string LicenseStartValue { get; set; }
    }
}
