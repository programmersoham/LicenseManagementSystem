@using BlazorApp.Models
@page "/manageuser"
@inject HttpClient HttpClient
@attribute [Authorize]

<h1>User Data</h1>
<div class="row">
    <div class="col-md-6">
        <a href='/user/add' class="btn btn-primary" role="button">
            <i class="fas fa-user-plus"></i>
            Add User
        </a>
    </div>
    <div class="input-group col">
        <input type="text" class="form-control" placeholder="Search user by name"
               @bind="SearchString" @bind:event="oninput" @onkeyup="FilterUser" />
        @if (SearchString.Length > 0)
        {
            <div class="input-group-append">
                <button class="btn btn-danger" @onclick="ResetSearch">
                    <i class="fas fa-times"></i>
                </button>
            </div>
        }
    </div>
</div>
<br />
@if (userList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-striped align-middle table-bordered">
        <thead class="table-success">
            <tr>
                <th>ID</th>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Company Name</th>
                <th>Phone Number</th>
                <th>Email</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in userList)
            {
                <tr>
                    <td>@user.Id</td>
                    <td>@user.FirstName</td>
                    <td>@user.LastName</td>
                    <td>@user.CompanyName</td>
                    <td>@user.PhoneNumber</td>
                    <td>@user.Email</td>
                    <td>
                        <a href='/user/edit/@user.Id' class="btn btn-outline-dark" role="button">
                            edit
                        </a>
                        <a href='/user/delete/@user.Id' class="btn btn-outline-danger" role="button" @onclick="() => DeleteConfirm(user.Id)">
                            delete
                        </a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    protected List<User>? userList = new List<User>();
    private const string RequestUri = "https://localhost:7199/api/User";
    protected List<User>? searchUserData = new List<User>();
    protected User user = new User();
    protected string SearchString { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await GetUser();
    }

    protected async Task GetUser()
    {
        userList = await HttpClient.GetFromJsonAsync<List<User>>(RequestUri);
        searchUserData = userList;
    }

    protected void FilterUser()
    {
        if (!string.IsNullOrEmpty(SearchString))
        {
            userList = searchUserData
                .Where(x => x.FirstName.IndexOf(SearchString, StringComparison.OrdinalIgnoreCase) != -1 ||
                            x.LastName.IndexOf(SearchString, StringComparison.OrdinalIgnoreCase) != -1)
                .ToList();
        }
        else
        {
            userList = searchUserData;
        }
    }

    protected void DeleteConfirm(int userId)
    {
        user = userList.FirstOrDefault(x => x.Id == userId);
        
    }

    public void ResetSearch()
    {
        SearchString = string.Empty;
        userList = searchUserData;
    }
}
